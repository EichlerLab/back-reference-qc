import pandas as pd
import os

# --------  Load sample sheet & config-------- #
df = pd.read_table(config["manifest"], dtype=str, index_col="sample") #sample\tccs_fofn\tsr_fofn

configfile: "config/resources.yaml"

# --------  Globals -------- #
YAK_VERSION="f37704a"

wildcard_constraints:
    data_type="ccs|sr"

# --------  Input functions -------- #
def get_reads(which_one="fastq_files"):
    def inner(wildcards):
        if which_one == "fastq_files":
            fofn_path = df.at[wildcards.sample, f"{wildcards.data_type}_fofn"]
            return pd.read_table(fofn_path, names=["filepath"]).filepath.tolist()
        elif which_one == "cell":
            fofn_df = get_cell_fastq(sample_name=wildcards.sample)
            return fofn_df.at[wildcards.cell_name, "filepath"]
        elif which_one == "fai":
            fofn_df = get_cell_fastq(sample_name=wildcards.sample)
            fofn_df["fai"] = fofn_df["filepath"] + ".fai"
            return fofn_df.at[wildcards.cell_name, "fai"]
    return inner

def get_cell_fastq(sample_name):
    fofn_path = df.at[sample_name, "ccs_fofn"]
    fofn_df = pd.read_table(fofn_path,names=["filepath"])

    # Get the cell name minus the extension
    def get_cell_name(fn):
        bn = os.path.basename(fn).split(".")[:-1]
        return ".".join(bn)

    fofn_df["cell_name"] = fofn_df.filepath.map(get_cell_name)

    fofn_df.set_index("cell_name",inplace=True)
    return fofn_df

def get_cell_outs(which_one):
    def inner(wildcards):
        if which_one == "qv":
            fofn_df = get_cell_fastq(sample_name=wildcards.sample)
            cell_specific_qv = fofn_df.apply(lambda row: f"results/read_qv/{wildcards.sample}/{row.name}-sr_qv.txt.gz",axis=1).tolist()

            return cell_specific_qv
        elif which_one == "new_fastqz":
            fofn_df = get_cell_fastq(sample_name=wildcards.sample)
            new_fastqz = fofn_df.apply(lambda row: f"results/reads_filtered/{wildcards.sample}/{row.name}-subset.fastq.gz",axis=1).tolist()

            return new_fastqz
        elif which_one == "filtered_yak":
            fofn_df = get_cell_fastq(sample_name=wildcards.sample)
            filtered_yak = fofn_df.apply(lambda row: f"results/reads_filtered/{wildcards.sample}/{row.name}-sr_qv-filtered.txt.gz",axis=1).tolist()

            return filtered_yak
        else:
            raise ValueError("Unsupported param in get_cell_specific_outs at the moment.")
    return inner

def get_final_output(wildcards):
    final_outputs = expand(
        [
            "results/read_qv/{sample}/ccs-sr_kqv.txt.gz",
            "results/plots/{sample}/kde-before_filter.png", "results/plots/{sample}/kde-after_filter.png"
            "results/reads_filtered/{sample}/fastq.fofn"
        ],
        sample=df.index
    )
    return final_outputs


# --------  Begin -------- #
rule all:
    input:
        get_final_output

rule buildmer:
    input:
        reads = get_reads(which_one="fastq_files")
    output:
        hash_table = temp("results/hash_table/{sample}/{data_type}.yak")
    params:
        sr_endedness = config.get("illumina", "pair")
    threads: config["yak"]["heavy"]["threads"]
    resources:
        mem=lambda wildcards, attempt: attempt * config["yak"]["heavy"]["mem"],
        hrs=config["yak"]["hrs"],
    envmodules:
        "modules",
        "modules-init",
        "modules-gs/prod",
        "modules-eichler/prod",
        f"yak/{YAK_VERSION}"
    shell:
        """
        if [[ {wildcards.data_type} == "ccs" ]]; then
        
            # build k-mer hash tables for high-coverage reads; discard singletons
            yak count -b 37 -t {threads} -o {output.hash_table} {input.reads}
        
        elif [[ {wildcards.data_type} == "sr" ]]; then
        
            if [[ {params.sr_endedness} == "single" ]]; then
                yak count -b 37 -t {threads} -o {output.hash_table} <(zcat {input.reads})
            else
                # for paired end: to provide two identical streams
                yak count -b 37 -t {threads} -o {output.hash_table} <(zcat {input.reads}) <(zcat {input.reads})
            fi
        else
            echo "Invalid arguments data_type: {wildcards.data_type} and short read endedness: {params.sr_endedness}"
            exit 1
            
        fi
        """

rule compute_read_qv:
    input:
        ccs_read = get_reads(which_one="cell"),
        hash_table = "results/hash_table/{sample}/sr.yak",
    output:
        qv_txt = "results/read_qv/{sample}/{cell_name}-sr_qv.txt.gz",
    threads: config["yak"]["heavy"]["threads"]
    resources:
        mem=lambda wildcards, attempt: attempt * config["yak"]["heavy"]["mem"],
        hrs=config["yak"]["hrs"],
    envmodules:
        "modules",
        "modules-init",
        "modules-gs/prod",
        "modules-eichler/prod",
        f"yak/{YAK_VERSION}"
    shell:
        """
        # compute read QV
        yak qv -t {threads} -p {input.hash_table} {input.ccs_read} | gzip -c > {output.qv_txt}
        """

rule compute_kmer_qv:
    input:
        ccs_hash_table = "results/hash_table/{sample}/ccs.yak",
        sr_hash_table = "results/hash_table/{sample}/sr.yak",
    output:
        kmer_qv = "results/read_qv/{sample}/ccs-sr_kqv.txt.gz"
    threads: config["yak"]["light"]["threads"]
    resources:
        mem= lambda wildcards,attempt: attempt * config["yak"]["light"]["mem"],
        hrs=config["yak"]["hrs"],
    envmodules:
        "modules",
        "modules-init",
        "modules-gs/prod",
        "modules-eichler/prod",
        f"yak/{YAK_VERSION}"
    shell:
        """
        # make sure directories exist
        mkdir -p $( dirname {output.kmer_qv} )
        
        # compute k-mer QV for reads
        yak inspect {input.ccs_hash_table} {input.sr_hash_table} | gzip -c > {output.kmer_qv}
        """

rule generate_kde_plot:
    input:
        read_qv_files = get_cell_outs(which_one="qv")
    output:
        sample_qv_kde = "results/plots/{sample}/kde-before_filter.png"
    threads: 1
    resources:
        mem= lambda wildcards,attempt: attempt * 16,
        hrs=config["yak"]["hrs"],
    run:
        import matplotlib.pyplot as plt
        import seaborn as sns
        import gzip

        df = pd.DataFrame()
        for f in input.read_qv_files:
            with gzip.open(f, "rt") as infile:
                fn = os.path.basename(f)

                data = infile.readlines()
                read_qvs = []

                for line in data:
                    if line.startswith("SQ"):
                        line_split = line.split()
                        read_name = line_split[1]
                        qv = line_split[5]
                        read_qvs.append({"read_name": read_name, "qv": qv, "cell": fn})

                one_df = pd.DataFrame.from_records(read_qvs)
            df = pd.concat([df, one_df])

        df["cell"] = df["cell"].str.split(".", expand=True)[0]
        # Make sure qv is float
        df = df.astype({'qv': 'float64'})

        ax = sns.kdeplot(data=df, x="qv", hue="cell", palette="colorblind")

        # Move legend outside of plot
        sns.move_legend(ax,"upper left",bbox_to_anchor=(1, 1))

        plt.title(f"Gaussian KDE of Read QVs\nusing its Illumina k-mers\nsample={wildcards.sample}")
        plt.tight_layout()
        plt.savefig(output.sample_qv_kde, dpi=300)


rule extract_lowQ_reads:
    input:
        yak_out_txt = "results/read_qv/{sample}/{cell_name}-sr_qv.txt.gz",
        fastq_fai = get_reads(which_one="fai")
    output:
        yak_filtered = 'results/reads_filtered/{sample}/{cell_name}-sr_qv-filtered.txt.gz',
        lowQ_reads = 'results/reads_filtered/{sample}/{cell_name}_lowQV-reads.txt',
        target_reads = 'results/reads_filtered/{sample}/{cell_name}_target-reads.txt',
        new_fai = 'results/reads_filtered/{sample}/{cell_name}-subset.fastq.gz.fai'
    threads: 1
    resources:
        mem = 1,
        hrs=12
    run:
        from scipy import stats

        yak_out_df = pd.read_csv(input.yak_out_txt,sep='\t',comment='C',header=None,usecols=[1, 5],names=['read_name', 'qv']).dropna()

        # Calculate Z score
        yak_out_df["z"] = stats.zscore(yak_out_df["qv"])

        # Write out a filtered yak output to plot KDE later on
        yak_out_df[abs(yak_out_df['z']) < 3].to_csv(output.yak_filtered,header=True,index=False,columns=['read_name', 'qv'], sep='\t')

        # Get low quality reads to filter out
        yak_out_df = yak_out_df[abs(yak_out_df['z']) > 3] # absolute value to consider both tails of distribution
        yak_out_df.to_csv(output.lowQ_reads, index=False, header=False)

        # Filter out from fai and output the target reads
        fastq_fai_df = pd.read_csv(input.fastq_fai, sep='\t', header=None, names=['read_name', 'length', 'offset', 'linebases', 'linewidth', 'qualoffset'])
        fastq_fai_df = fastq_fai_df[~fastq_fai_df['read_name'].isin(yak_out_df['read_name'])]

        fastq_fai_df.to_csv(output.target_reads,header=False,index=False,columns=['read_name'], sep='\t')
        fastq_fai_df.to_csv(output.new_fai,header=False,index=False, sep='\t')

parts = 15
scattergather:
    sg_parts = parts

rule split_fastq:
    input:
        target_reads=rules.extract_lowQ_reads.output.target_reads,
    output:
        splitted = temp(scatter.sg_parts('results/reads_filtered/{{sample}}/temp/{{cell_name}}_target-reads_{scatteritem}.txt'))
    threads: 1
    resources:
        mem = 1,
        hrs=12
    run:
        import numpy as np
        df = pd.read_csv(input.target_reads, header=None)

        dfs = np.array_split(df, parts)
        for idx, entry in enumerate(dfs):
            entry.to_csv(output.splitted[idx], index=False, header=False)


rule subset_fastq:
    input:
        target_reads=rules.split_fastq.output.splitted,
        fastq=get_reads(which_one='cell')
    output:
        subsetted_fastq = temp('results/reads_filtered/{sample}/temp/{cell_name}-subset_{scatteritem}.fastq')
    threads: 1
    resources:
        mem = 1,
        hrs=12
    envmodules:
        "modules",
        "modules-init",
        "modules-gs/prod",
        "modules-eichler/prod",
        "seqtk/1.3",
    shell:
        '''
        seqtk subseq {input.fastq} {input.target_reads} > {output.subsetted_fastq}
        '''


rule gather_fastq:
    input:
        subset_fastqs = gather.sg_parts('results/reads_filtered/{{sample}}/temp/{{cell_name}}-subset_{scatteritem}.fastq')
    output:
        new_fastqz = 'results/reads_filtered/{sample}/{cell_name}-subset.fastq.gz',
        merged_fastqs = temp('results/reads_filtered/{sample}/{cell_name}-subset.fastq')
    threads: 1
    resources:
        mem = 1,
        hrs=12
    envmodules:
        "modules",
        "modules-init",
        "modules-gs/prod",
        "modules-eichler/prod",
        "samtools/1.14",
    shell:
        '''
        cat {input.subset_fastqs} > {output.merged_fastqs} && bgzip --keep {output.merged_fastqs} && samtools fqidx {output.new_fastqz}
        '''

rule make_new_fofn:
    input:
        fastq = get_cell_outs(which_one="new_fastqz")
    output:
        new_fofn = 'results/reads_filtered/{sample}/fastq.fofn'
    threads: 1
    resources:
        mem = 1,
        hrs=12
    shell:
        '''
        readlink -f {input.fastq} > {output.new_fofn}
        '''

rule kde_filtered:
    input:
        read_qv_files = get_cell_outs(which_one="filtered_yak")
    output:
        sample_qv_kde = "results/plots/{sample}/kde-after_filter.png"
    threads: 1
    resources:
        mem= lambda wildcards,attempt: attempt * 16,
        hrs=config["yak"]["hrs"],
    run:
        import matplotlib.pyplot as plt
        import seaborn as sns

        df = pd.DataFrame()
        for f in input.read_qv_files:
            one_df = pd.read_table(f, header=0)
            one_df["filepath"] = os.path.basename(f)
            one_df["cell"] = one_df["filepath"].str.split(".",expand=True)[0]
            one_df = one_df[["read_name", "qv", "cell"]]
            df = pd.concat([df, one_df])

        # Make sure qv is float
        df = df.astype({'qv': 'float64'})

        ax = sns.kdeplot(data=df, x="qv", hue="cell", palette="colorblind")

        # Move legend outside of plot
        sns.move_legend(ax,"upper left",bbox_to_anchor=(1, 1))

        plt.title(f"Gaussian KDE of Read QVs (filtered)\nusing its Illumina k-mers\nsample={wildcards.sample}")
        plt.tight_layout()
        plt.savefig(output.sample_qv_kde, dpi=300)